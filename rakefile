require 'rake/clean'

require 'fileutils'

load '../z80-libraries/tasks.rake'

CLEAN.include("**/*.o", "**/*.bin", "**/*.hex", "**/*.diss", "**/*.lib", "**/*.lis", "**/*.map", "**/*.sym")

namespace 'build' do
    desc "Build boot sector image"
    task 'boot' do
        cmd = "zcc "
        cmd += "+#{CONFIG} -compiler-sccz80 "
        cmd += "-O2 -SO2 "
        cmd += "-L#{LIB} -I#{LIB_INCLUDE} "
        cmd += "-Ca\"-I#{LIB_INCLUDE}\" "
        cmd += "--no-crt "
        cmd += "-o bootsector_temp.bin "
        cmd += "boot/bootsector.asm"

        success = system(cmd)

        if success
            # Pad to 512 bytes.
            bin = File.read("bootsector_temp.bin", mode: "rb")
            abort("Boot sector too large: size is #{bin.size}") if bin.size > 512
            File.open("bootsector.bin", "wb") do |f|
                bin.bytes.each do |b|
                    f.putc b
                end

                (512-bin.size).times do
                    f.putc 0
                end
            end

            system("z88dk-dis -o 0x8000 bootsector.bin > bootsector.diss")
        end
    end

    desc "Build 2nd stage loader image"
    task 'loader' => ['lib:stdlib'] do
        cmd = "zcc "
        cmd += "+#{CONFIG} -compiler-sccz80 "
        cmd += "-O2 -SO2 "
        cmd += "-L#{LIB} -I#{LIB_INCLUDE} "
        cmd += "-Ca\"-I#{LIB_INCLUDE}\" "
        cmd += "-Cl\"-r0x8200\" "
        cmd += "-crt0 loader/reset.asm "
        cmd += "-m "
        cmd += "-o loader_temp.bin "
        cmd += "loader/*.c "
        cmd += "loader/*.asm "

        success = system(cmd)

        if success
            num_sectors = 9

            bin = File.read("loader_temp.bin", mode: "rb")
            abort("Loader image too large: size is #{bin.size} (#{512 * num_sectors} expected)") if bin.size > (512*num_sectors)

            File.open("loader.bin", "wb") do |f|
                bin.bytes.each do |b|
                    f.putc b
                end

                ((512*num_sectors)-bin.size).times do
                    f.putc 0
                end
            end

            system("z88dk-dis -o 0x8200 loader.bin > loader.diss")

            File.open("loader.bin", "rb") do |f|
                num_sectors.times do |i|
                    File.open("loader_#{i+1}.bin", "wb") do |f_out|
                        512.times do
                            f_out.putc f.getc
                        end
                    end
                end
            end
        end
    end

    desc "Build kernel image"
    task 'kernel' => ['lib:stdlib'] do
        # Include every source file but reset.asm, which is the startup code.
        src = (Dir.glob("kernel/*.asm") + Dir.glob("kernel/*.c")) - ["kernel/reset.asm"]

        cmd = "zcc "
        cmd += "+#{CONFIG} -compiler-sccz80 "
        cmd += "-O2 -SO2 "
        cmd += "-DZ88DK "
        cmd += "-Ikernel "
        cmd += "-L#{LIB} -I#{LIB_INCLUDE} "
        cmd += "-Ca\"-I#{LIB_INCLUDE}\" "
        cmd += "-Cl\"-r0x0000\" "
        cmd += "-crt0 kernel/reset.asm "
        cmd += "-lstdlib "
        cmd += "-m "
        cmd += "-o kernel.bin "
        cmd += src.join(" ")

        success = system(cmd)

        if success
            system("z88dk-dis -o 0x0000 kernel.bin > kernel.diss")

            # Make sure that the kernel image is no more than 23Kb in size.
            limit = 23 * 1024
            bin = File.read("kernel.bin", mode: "rb")
            abort("Kernel image is too large: size is #{bin.size} (#{limit} expected)") if bin.size > limit
        end
    end

    desc "Build command processor image"
    task 'command' => ['lib:stdlib'] do
        # Include every source file but reset.asm, which is the startup code.
        src = (Dir.glob("command/*.asm") + Dir.glob("command/*.c")) - ["command/reset.asm"]

        cmd = "zcc "
        cmd += "+#{CONFIG} -compiler-sccz80 "
        cmd += "-O2 -SO2 "
        cmd += "-L#{LIB} -I#{LIB_INCLUDE} "
        cmd += "-Ca\"-I#{LIB_INCLUDE}\" "
        cmd += "-Cl\"-r0x6000\" "
        cmd += "-crt0 command/reset.asm "
        cmd += "-lstdlib "
        cmd += "-m "
        cmd += "-o command.bin "
        cmd += src.join(" ")

        success = system(cmd)

        if success
            system("z88dk-dis -o 0x6000 command.bin > command.diss")

            # Make sure that the command processor image is no more than 8Kb in size.
            limit = 8 * 1024
            bin = File.read("command.bin", mode: "rb")
            abort("Command processor image is too large: size is #{bin.size} (#{limit} expected)") if bin.size > limit
        end
    end

    desc "Build all"
    task "all" => ["loader", "boot", "kernel", "command"]
end

namespace 'install' do
    desc "Install kernel image onto CF-card"
    task 'kernel', [:path] => ['build:kernel'] do |t, args|
        abort("No path specified") if args[:path].nil?
        FileUtils.cp('kernel.bin', File.join(args[:path], 'KERNEL.BIN'))
    end

    desc "Install command processor image onto CF-card"
    task 'command', [:path] => ['build:command'] do |t, args|
        abort("No path specified") if args[:path].nil?
        FileUtils.cp('command.bin', File.join(args[:path], 'COMMAND.BIN'))
    end
end

namespace 'test' do
    desc "Run kernel unit tests"
    task 'kernel' do
        # Compile test/main.c, other test/*.c, and kernel files for which
        # a file exists under test.
        # Include every source file but reset.asm, which is the startup code.
        src = []

        Dir.glob("kernel/test/*.c").each do |f|
            src << f
            src << "kernel/#{File.basename(f)}" unless File.basename(f) == "main.c"
        end

        # Add mock files
        Dir.glob("kernel/test/mock/*.c").each do |f|
            src << f
        end

        cmd = "gcc "
        cmd += "-O1 "
        cmd += "-Ikernel "
        cmd += "-Ikernel/test/mock "
        cmd += "-o test_kernel.exe "
        cmd += src.join(" ")

        puts cmd
        system(cmd)
    end
end

task "install", [:path] => ["install:kernel", "install:command"]
